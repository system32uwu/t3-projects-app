// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Project {
    id               String @id @default(cuid())
    title            String
    shortDescription String
    fullDescription  String
    githubUrl        String
    slug             String
    logo             String
    coverImage       String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    logs      Log[]

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Log {
    id    String @id @default(cuid())
    index Int
    title String
    slug  String

    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    @@unique([id, index])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
